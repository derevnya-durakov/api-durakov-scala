enum Suit {
    Clubs
    Diamonds
    Hearts
    Spades
}

enum Rank {
    Six
    Seven
    Eight
    Nine
    Ten
    Jack
    Queen
    King
    Ace
}

type Card {
    suit: Suit!
    rank: Rank!
}

type RoundPair {
    attack: Card!
    beaten: Card
}

type Player {
    id: ID!
    nick: String!
    handSize: Int!
}

type GameState {
    id: ID!
    nonce: Int!
    trumpSuit: Suit!
    deckSize: Int!
    discardPileSize: Int!
    hand: [Card!]!
    players: [Player!]!
    round: [RoundPair!]!
    defendPlayerId: ID!
}

type User {
    id: ID!
    nickname: String!
}

type Auth {
    accessToken: ID!
    player: User!
}

type UserEvent {
    name: String!
    player: User!
}

type GameEvent {
    name: String!
}

type Query {
    users: [User!]!
    findUser(id: String!): User
    accessToken(nickname: String!): String
    auth: Auth!
    getGameState(id: ID!): GameState
}

type Mutation {
    addUser(nickname: String!): User!
    startGame(players: [ID!]!): GameState!
}

type Subscription {
    usersUpdated: UserEvent!
    gameUpdates(id: ID!): GameEvent!
}

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
